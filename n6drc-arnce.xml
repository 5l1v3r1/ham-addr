<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="none" category="std" docName="n6drc-arnce-1">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="yes"?>
<?rfc private="yes"?>
<?rfc topblock="yes"?>
<?rfc comments="yes"?>
<front>
<title abbrev="N6DRC ARNCE (Ham Address)">Amateur Radio Numeric Callsign Encoding</title>

<author initials="R." surname="Quattlebaum" fullname="Robert S. Quattlebaum (N6DRC)">
<organization>Individual</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country>USA</country>
<region>California</region>
</postal>
<phone></phone>
<email>darco@deepdarc.com</email>
<uri></uri>
</address>
</author>
<date year="2015" month="December" day="19"/>

<area>Internet</area>
<workgroup></workgroup>
<keyword>Ham Address</keyword>
<keyword>EUI-48</keyword>
<keyword>EUI-64</keyword>
<keyword>Link Local</keyword>
<keyword>Callsign</keyword>
<keyword>Amateur Radio</keyword>
<keyword>Ham Radio</keyword>


<abstract>
<t>This document is a specification for efficiently and reversibly
encoding radio callsigns into numeric identifiers, which may then be
used as addresses for packet radio or other purposes. Additionally,
this document also describes a way to encode a callsign into an EUI-48
and EUI-64 address using similar methods, containing up to 8 and 11
characters, respectively.
</t>
<t>While this addressing scheme was developed for amateur radio purposes,
there is no particular reason why it could not be adapted for use with
other radio services that make use of callsigns.
</t>
</abstract>


<note title="Copyright Notice">
<t>Copyright (C) 2015 Robert Quattlebaum. All rights reserved.
</t>
<t>This use of this document is hereby granted under the terms of the
Creative Commons International Attribution 4.0 Public License, as
published by Creative Commons.
</t>
<t>
<list style="symbols">
<t><eref target="https://creativecommons.org/licenses/by/4.0/"/></t>
</list>
</t>
<t>This work is provided as-is. Unless otherwise provided in writing, the
authors make no representations or warranties of any kind concerning
this work, express, implied, statutory or otherwise, including without
limitation warranties of title, merchantability, fitness for a
particular purpose, non infringement, or the absence of latent or
other defects, accuracy, or the present or absence of errors, whether
or not discoverable, all to the greatest extent permissible under
applicable law.
</t>
</note>


<note title="Implementations of this standard">
<t>The above copyright notice and license applies only to this specific
document. The implementation of mechanisms described herein, as well
as the replication and use of any contained datasets required for the
implementation of said mechanisms, are offered freely to be used for
any purpose, public or private, commercial or non-commercial.
</t>
</note>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>Radio callsigns are generally assigned to individuals or organizations
for identification purposes by the local regulatory agency(The FCC
in the US).
</t>
<t>The longest callsign that can currently be assigned to an individual
is six characters long. If we naively encode each character using
ASCII, the largest callsign would be 48 bits long. However, if we
encoded each character using just six bits, this would make the
address 36 bits large. An improvement, but we can do better!
</t>
<t>Callsigns exclusively consist of a collection of letters (A thru Z)
and numeric digits (0 thru 9). There are also secondary suffixes which
can be appended with the slash character <spanx style="verb">/</spanx>, giving us a total of 37
individual symbols that can be present in a callsign. We can use this
limited character set to our advantage.
</t>
<t>It turns out that if we limit ourselves to fewer than 40 different
possible symbols, we can store up to three characters in a 16-bit
block. Thus, we can store a six character callsign in just 32 bits, a
nine character callsign in 48 bits and a twelve character callsign in
64. 12 characters is plenty of space for both a callsign <spanx style="emph">and</spanx> an
indicator suffix/prefix.
</t>
<t>This document takes the basic premise described above and fleshes it
out into a full addressing specification by defining the following:
</t>
<t>
<list style="symbols">
<t>A base-40 character set, optimized for encoding radio callsigns</t>
<t>A method to encode three base-40 values (three callsign
characters) within a 16-bit (two-byte) integer</t>
<t>A 64-bit address format ('HAM-64') for encoding callsigns up to 12
characters into a 64-bit address for use with link-layer packet
radio protocols</t>
<t>A method for encoding callsigns up to 8 characters long in an
EUI-48 address</t>
<t>A method for encoding callsigns up to 11 characters long in an
EUI-64 address</t>
</list>
</t>
</section>

<section anchor="base40-character-set" title="Base-40 Character Set">
<t>The address format stores each character as a number in base-40. The
character set is defined below:
</t>
<texttable>
<ttcol align="center">No.</ttcol>
<ttcol align="center">Char</ttcol>
<ttcol align="center">No.</ttcol>
<ttcol align="center">Char</ttcol>
<ttcol align="center">No.</ttcol>
<ttcol align="center">Char</ttcol>
<ttcol align="center">No.</ttcol>
<ttcol align="center">Char</ttcol>

<c>0</c><c><spanx style="emph">NUL</spanx></c><c>10</c><c><spanx style="verb">J</spanx></c><c>20</c><c><spanx style="verb">T</spanx></c><c>30</c><c><spanx style="verb">3</spanx></c>
<c>1</c><c><spanx style="verb">A</spanx></c><c>11</c><c><spanx style="verb">K</spanx></c><c>21</c><c><spanx style="verb">U</spanx></c><c>31</c><c><spanx style="verb">4</spanx></c>
<c>2</c><c><spanx style="verb">B</spanx></c><c>12</c><c><spanx style="verb">L</spanx></c><c>22</c><c><spanx style="verb">V</spanx></c><c>32</c><c><spanx style="verb">5</spanx></c>
<c>3</c><c><spanx style="verb">C</spanx></c><c>13</c><c><spanx style="verb">M</spanx></c><c>23</c><c><spanx style="verb">W</spanx></c><c>33</c><c><spanx style="verb">6</spanx></c>
<c>4</c><c><spanx style="verb">D</spanx></c><c>14</c><c><spanx style="verb">N</spanx></c><c>24</c><c><spanx style="verb">X</spanx></c><c>34</c><c><spanx style="verb">7</spanx></c>
<c>5</c><c><spanx style="verb">E</spanx></c><c>15</c><c><spanx style="verb">O</spanx></c><c>25</c><c><spanx style="verb">Y</spanx></c><c>35</c><c><spanx style="verb">8</spanx></c>
<c>6</c><c><spanx style="verb">F</spanx></c><c>16</c><c><spanx style="verb">P</spanx></c><c>26</c><c><spanx style="verb">Z</spanx></c><c>36</c><c><spanx style="verb">9</spanx></c>
<c>7</c><c><spanx style="verb">G</spanx></c><c>17</c><c><spanx style="verb">Q</spanx></c><c>27</c><c><spanx style="verb">0</spanx></c><c>37</c><c><spanx style="verb">/</spanx></c>
<c>8</c><c><spanx style="verb">H</spanx></c><c>18</c><c><spanx style="verb">R</spanx></c><c>28</c><c><spanx style="verb">1</spanx></c><c>38</c><c><spanx style="verb">-</spanx></c>
<c>9</c><c><spanx style="verb">I</spanx></c><c>19</c><c><spanx style="verb">S</spanx></c><c>29</c><c><spanx style="verb">2</spanx></c><c>39</c><c><spanx style="emph">ESC</spanx></c>
</texttable>
<t>Where <spanx style="emph">NUL</spanx> is analogous to the ASCII <spanx style="emph">NUL</spanx> character, and <spanx style="emph">ESC</spanx> is
reserved for future use with a currently undefined and experimental
character escaping mechanism. (Should be rendered as <spanx style="verb">^</spanx>)
</t>
</section>

<section anchor="chunk-encoding" title="16-Bit Chunk Encoding">
<t>Using the above character set, we can store three characters as a single
integer that fits nicely within a 16-bit integer using the encoding:
</t>

<figure align="center"><artwork align="center">
S = CHAR[0] * 1600 + CHAR[1] * 40 + CHAR[2]
</artwork></figure>
<t>Where <spanx style="verb">CHAR[0]</spanx> is the leftmost character and <spanx style="verb">CHAR[2]</spanx> is the
rightmost character in the &quot;chunk&quot;.
</t>
<t>We can then decode the original characters by reversing that process:
</t>

<figure align="center"><artwork align="center">
CHAR[0] = S / 1600 MOD 40
CHAR[1] = S / 40 MOD 40
CHAR[2] = S MOD 40
</artwork></figure>
<t>When encoding a chunk that uses less than three characters, you would
set <spanx style="verb">CHAR[2]</spanx> and/or <spanx style="verb">CHAR[1]</spanx> (as appropriate) to the value 0
(<spanx style="emph">NUL</spanx>), indicating that there is not a character present in that
position.
</t>
</section>

<section anchor="ham64-address-format" title="HAM-64 Address Format">
<t>HAM-64 addresses are encoded as up to four 16-bit big-endian &quot;chunks&quot;,
which can contain up to three characters in each chunk. Proper
addresses are 64-bits long, allowing for long, complex callsigns.
Chunks are always stored in big-endian order.
</t>
<t>When writing out a HAM-64 address, each chunk is shown as a four-digit
hexadecimal number, with each chunk separated by a colon <spanx style="verb">:</spanx>.
</t>
<t>Lets have a look at a relatively short callsign, <spanx style="verb">N6DRC</spanx>:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">N6D</spanx> encodes to <spanx style="verb">0x5CAC</spanx></t>
<t><spanx style="verb">RC</spanx> encodes to <spanx style="verb">0x70F8</spanx></t>
</list>
</t>
<t>Thus, the full ham address for this callsign is <spanx style="verb">5CAC:70F8:0000:0000</spanx>,
or just <spanx style="verb">5CAC:70F8</spanx> for short.
</t>
<t>The process is identical for large callsigns, like <spanx style="verb">VI2BMARC50</spanx>:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">VI2</spanx> encodes to <spanx style="verb">0x8B05</spanx></t>
<t><spanx style="verb">BMA</spanx> encodes to <spanx style="verb">0x0E89</spanx></t>
<t><spanx style="verb">RC5</spanx> encodes to <spanx style="verb">0x7118</spanx></t>
<t><spanx style="verb">0</spanx> encodes to <spanx style="verb">0xA8C0</spanx></t>
</list>
</t>
<t>Thus, the ham address for this callsign is <spanx style="verb">8B05:0E89:7118:A8C0</spanx>.
Since it is so long, there is no shorter representation.
</t>
</section>

<section anchor="special-ham64-addresses" title="Special HAM-64 Addresses">
<t>All addresses larger than <spanx style="verb">F9FF:...</spanx> are special addresses, and do not
have a callsign representation. These values are used for multicast
and broadcast for link layers that use ham addresses natively. All
values and ranges which are not explicitly defined below are to be
considered reserved and not used.
</t>

<section anchor="broadcast" title="Broadcast">
<t>The broadcast (all-nodes) address for link-layers using HAM-64
addresses is defined as <spanx style="verb">FFFF:0000:0000:0000</spanx>.
</t>
</section>

<section anchor="ipv6-multicast" title="IPv6 Multicast">
<t>For link-layers using HAM-64 addresses for link-layer addressing,
IPv6 multicast MUST be implemented using addresses of the format
<spanx style="verb">FAxx:xxxx:xxxx:xxxx</spanx>, where <spanx style="verb">x</spanx> represents a special <spanx style="emph">reversed</spanx>
representation (defined below) of the IPv6 group-id.
</t>
<t>For converting IPv6 multicast addresses into link-local HAM-64 multicast
addresses, you MUST store the lower 13 octets of the multicast group-id <spanx style="emph">in
reverse order</spanx>. This takes advantage of the fact that IPv6 multicast
addresses tend to be zero-filled, allowing for compact HAM-64 address
representations. For example, a multicast address of <spanx style="verb">ff02::1</spanx> would
simply be the abbreviated ham address <spanx style="verb">FA01</spanx>.
</t>
</section>

<section anchor="ipv4-multicast" title="IPv4 Multicast">
<t>IPv4 multicast can be implemented for link-layers using HAM-64 addresses
using addresses of the format <spanx style="verb">FBxx:xxxx:0000:0000</spanx>, where <spanx style="verb">x</spanx> represents
the byte values for the last three octets of the IPv4 multicast address.
</t>
</section>
</section>

<section anchor="eui48-and-eui64-encoding" title="EUI-48 and EUI-64 Encoding">
<t>Sometimes it is useful to encode a callsign in an EUI-48 or EUI-64
address. This can be useful when operating standard Wi-Fi or 802.15.4
equipment under section 97 rules. While it is mathematically impossible
to encode every 64-bit ham address as either an EUI-48 or an EUI-64, a
significant subset of addresses can be encoded.
</t>
<t>One of the goals of this encoding is to allow fast translation between
a &quot;ham-address&quot; and its associated EUI-64 or EUI-48---specifically, no
multiplication or division is required. Thus, 61 of the total 64-bits
have a direct one-to-one representation in an EUI-64 representation,
with the last three bits assumed to be zero (which they will be if the
last character is <spanx style="emph">NULL</spanx>).
</t>
<t>The basic algorithm for encoding works like this:
</t>
<t>
<list style="numbers">
<t>Rotate the address by 8 bits to the right (so that the last byte
becomes the first byte)</t>
<t>Set the least-significant three bits of the first byte to '0',
'1', '0'.</t>
</list>
</t>
<t>Care was taken to ensure that a EUI-48-encoded ham address that has
been converted to a EUI-64 address does not parse correctly unless
converted to a EUI-48 first.
</t>
<t><spanx style="strong">NOTE:</spanx> Special ham addresses (defined in a section above) MUST NOT
be encoded as a EUI-48 or EUI-64 using this scheme! EUI-48 and EUI-64
addresses have their own multicast/broadcast mapping, which must be
used instead.
</t>

<section anchor="eui48" title="EUI-48">
<t>This encoding allows us to encode an 8-digit callsign in a EUI-48:
</t>

<figure align="center"><artwork align="center">
   7 --Octet 1-- 0   7 --Octet 2-- 0   7 --Octet 3-- 0
M +---------------+ +---------------+ +---------------+ ...
S |C|C|C|C|C|0|1|0| |A|A|A|A|A|A|A|A| |A|A|A|A|A|A|A|A| ...
B +---------------+ +---------------+ +---------------+ ...

     7 --Octet 4-- 0   7 --Octet 5-- 0   7 --Octet 6-- 0
... +---------------+ +---------------+ +---------------+ L
... |B|B|B|B|B|B|B|B| |B|B|B|B|B|B|B|B| |C|C|C|C|C|C|C|C| S
... +---------------+ +---------------+ +---------------+ B
</artwork></figure>
<t>Where:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">A</spanx> is the 16-bit ham address encoding of the first, second, and
third characters of the callsign. Valid values are between
<spanx style="verb">0x0640</spanx> and <spanx style="verb">0xFA00</spanx></t>
<t><spanx style="verb">B</spanx> is the 16-bit ham address encoding of the fourth, fifth, and
sixth characters of the callsign. Valid values are between
<spanx style="verb">0x0000</spanx> and <spanx style="verb">0xFA00</spanx></t>
<t><spanx style="verb">C</spanx> is the most-significant 13-bits of the 16-bit ham address
encoding of the seventh and eighth characters of the callsign. The
least-significant three bits are always assumed to be zero. Note
that octet 1 contains bits 7 thru 3 and octet 6 contains bits 15
thru 8.</t>
</list>
</t>
<t>So, for <spanx style="verb">N6DRC</spanx>, <spanx style="verb">5CAC:70F8:0000:0000</spanx> becomes <spanx style="verb">02:5C:AC:70:F8:00</spanx>.
</t>
</section>

<section anchor="eui64" title="EUI-64">
<t>The encoding of an EUI-64 address is similar to the encoding of the
EUI-48 address, except that it can hold callsigns up to 11 characters.
</t>
<t>If the callsign is 8 characters or less, then you MUST encode your
callsign as an EUI-48 and convert it to an EUI-64 using the standard
EUI-48 to EUI-64 mechanism (using <spanx style="verb">0xFFFE</spanx> for the padding value). For
callsigns larger than 8 characters, we follow similar logic that we
did when constructing the EUI-48:
</t>

<figure align="center"><artwork align="center">
   7 --Octet 1-- 0   7 --Octet 2-- 0   7 --Octet 3-- 0
M +---------------+ +---------------+ +---------------+ ...
S |D|D|D|D|D|0|1|0| |A|A|A|A|A|A|A|A| |A|A|A|A|A|A|A|A| ...
B +---------------+ +---------------+ +---------------+ ...

            7 --Octet 4-- 0   7 --Octet 5-- 0
       ... +---------------+ +---------------+ ...
       ... |B|B|B|B|B|B|B|B| |B|B|B|B|B|B|B|B| ...
       ... +---------------+ +---------------+ ...

     7 --Octet 6-- 0   7 --Octet 7-- 0   7 --Octet 8-- 0
... +---------------+ +---------------+ +---------------+ L
... |C|C|C|C|C|C|C|C| |C|C|C|C|C|C|C|C| |D|D|D|D|D|D|D|D| S
... +---------------+ +---------------+ +---------------+ B
</artwork></figure>
<t>Where:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">A</spanx> is the 16-bit ham address encoding of the first, second, and
third character of the callsign. Valid values are between <spanx style="verb">0x0640</spanx>
and <spanx style="verb">0xFA00</spanx></t>
<t><spanx style="verb">B</spanx> is the 16-bit ham address encoding of the fourth, fifth, and
sixth characters of the callsign. Valid values are between
<spanx style="verb">0x0000</spanx> and <spanx style="verb">0xFA00</spanx></t>
<t><spanx style="verb">C</spanx> is the 16-bit ham address encoding of the seventh, eighth, and
ninth characters of the callsign. Valid values are between
<spanx style="verb">0x0000</spanx> and <spanx style="verb">0xFA00</spanx></t>
<t><spanx style="verb">D</spanx> is the most-significant 13-bits of the 16-bit ham address
encoding of the tenth and eleventh characters of the callsign. The
least-significant three bits are always assumed to be zero. Note
that octet 1 contains bits 7 thru 3 and octet 6 contains bits 15
thru 8.</t>
</list>
</t>
<t>So, from our original examples:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">N6DRC</spanx>: <spanx style="verb">5CAC:70F8:0000:0000</spanx> becomes <spanx style="verb">02:5C:AC:FF:FE:70:F8:00</spanx></t>
<t><spanx style="verb">VI2BMARC50</spanx>: <spanx style="verb">8B05:0E89:7118:A8C0</spanx> becomes
<spanx style="verb">C2:8B:05:0E:89:71:18:A8</spanx></t>
</list>
</t>
</section>

<section anchor="eui-hack" title="9-Char EUI-48 and 12-Char EUI-64">
<t>The astute reader may realize that there are a few 9-character
callsigns which <spanx style="emph">can</spanx> be encoded into an EUI-48. Likewise, there are a
few 12-character callsigns which can be encoded in an EUI-64. The
trick is that the integer representation of the last character must be
evenly divisible by 8.
</t>
<t>Thus, if any of the following characters are the last character of a 9
or 12 character callsign, it can still be represented fully as an
EUI-48 or EUI-64: <spanx style="verb">H</spanx>, <spanx style="verb">P</spanx>, <spanx style="verb">X</spanx>, or <spanx style="verb">5</spanx>.
</t>
</section>
</section>

</middle>
<back>

<section anchor="examples-and-test-vectors" title="Examples and Test Vectors">

<section anchor="callsigns" title="Callsigns">
<t>
<list style="symbols">
<t><spanx style="verb">N6DRC</spanx>:
<list style="symbols">
<t>HAM-64: <spanx style="verb">5CAC:70F8:0000:0000</spanx></t>
<t>EUI-48: <spanx style="verb">02:5C:AC:70:F8:00</spanx></t>
<t>EUI-64: <spanx style="verb">02:5C:AC:FF:FE:70:F8:00</spanx></t>
</list></t>
<t><spanx style="verb">KJ6QOH/P</spanx>:
<list style="symbols">
<t>HAM-64: <spanx style="verb">4671:6CA0:F000:0000</spanx></t>
<t>EUI-48: <spanx style="verb">02:46:71:6C:A0:F0</spanx></t>
<t>EUI-64: <spanx style="verb">02:46:71:FF:FE:6C:A0:F0</spanx></t>
</list></t>
<t><spanx style="verb">D9K</spanx>:
<list style="symbols">
<t>HAM-64: <spanx style="verb">1EAB:0000:0000:0000</spanx></t>
<t>EUI-48: <spanx style="verb">02:1E:AB:00:00:00</spanx></t>
<t>EUI-64: <spanx style="verb">02:1E:AB:FF:FE:00:00:00</spanx></t>
</list></t>
<t><spanx style="verb">NA1SS</spanx>:
<list style="symbols">
<t>HAM-64: <spanx style="verb">57C4:79B8:0000:0000</spanx></t>
<t>EUI-48: <spanx style="verb">02:57:C4:79:B8:00</spanx></t>
<t>EUI-64: <spanx style="verb">02:57:C4:FF:FE:79:B8:00</spanx></t>
</list></t>
<t><spanx style="verb">VI2BMARC50</spanx>:
<list style="symbols">
<t>HAM-64: <spanx style="verb">8B05:0E89:7118:A8C0</spanx></t>
<t>EUI-48: N/A</t>
<t>EUI-64: <spanx style="verb">C2:8B:05:0E:89:71:18:A8</spanx></t>
</list></t>
</list>
</t>
</section>

<section anchor="ipv6-multicast-1" title="IPv6 Multicast">
<t>
<list style="symbols">
<t><spanx style="verb">ff02::1</spanx>
<list style="symbols">
<t>HAM-64: <spanx style="verb">FA01:0000:0000:0000</spanx></t>
<t>EUI-48: <spanx style="verb">33:33:00:00:01</spanx></t>
</list></t>
</list>
</t>
</section>
</section>

<section anchor="references-and-links" title="References and Links">
<t>
<list style="symbols">
<t><eref target="https://gist.github.com/darconeous/e1c7c352098671a36230">Amateur Radio Next Generation Link Layer (ARNGLL)</eref></t>
<t><eref target="http://www.ng3k.com/Dxcc/dxcc.html"/></t>
<t><eref target="https://tools.ietf.org/html/rfc5234"/></t>
</list>
</t>
</section>

</back>
</rfc>
